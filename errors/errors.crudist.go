// Code generated by "crudist gen"; DO NOT EDIT.
package errors

import (
  "fmt"
)


// ConfigReadError error type
type ConfigReadError struct {
  Message string
}

func (C ConfigReadError) Error() string {
  return C.Message
}

func (C ConfigReadError) ErrorId() int {
  return 0
}

// NewConfigReadError creates a new ConfigReadError
func NewConfigReadError(arg0 string,arg1 error,) error {
  return ConfigReadError{
    fmt.Sprintf("(CONFIG READ | Id: 0) failed to read the config file %s: %v", arg0,arg1,),
  }
}


// ConfigParseError error type
type ConfigParseError struct {
  Message string
}

func (C ConfigParseError) Error() string {
  return C.Message
}

func (C ConfigParseError) ErrorId() int {
  return 1
}

// NewConfigParseError creates a new ConfigParseError
func NewConfigParseError(arg0 error,) error {
  return ConfigParseError{
    fmt.Sprintf("(BAD CONFIG | Id: 1) failed to parse the config: %v", arg0,),
  }
}


// TemplateError error type
type TemplateError struct {
  Message string
}

func (C TemplateError) Error() string {
  return C.Message
}

func (C TemplateError) ErrorId() int {
  return 2
}

// NewTemplateError creates a new TemplateError
func NewTemplateError(arg0 error,) error {
  return TemplateError{
    fmt.Sprintf("(TEMPLATE | Id: 2) failed to execute the template: %v", arg0,),
  }
}


// FileWriteError error type
type FileWriteError struct {
  Message string
}

func (C FileWriteError) Error() string {
  return C.Message
}

func (C FileWriteError) ErrorId() int {
  return 3
}

// NewFileWriteError creates a new FileWriteError
func NewFileWriteError(arg0 string,arg1 error,) error {
  return FileWriteError{
    fmt.Sprintf("(WRITE FILE | Id: 3) failed to write to %s: %v", arg0,arg1,),
  }
}


// FrameworkMissingError error type
type FrameworkMissingError struct {
  Message string
}

func (C FrameworkMissingError) Error() string {
  return C.Message
}

func (C FrameworkMissingError) ErrorId() int {
  return 4
}

// NewFrameworkMissingError creates a new FrameworkMissingError
func NewFrameworkMissingError(arg0 string,) error {
  return FrameworkMissingError{
    fmt.Sprintf("(FRAMEWORK MISSING | Id: 4) framework %s doesnt exist", arg0,),
  }
}

