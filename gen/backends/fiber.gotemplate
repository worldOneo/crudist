// Code generated by "crudist gen"; DO NOT EDIT.
package {{ .Package }}

import (
  "github.com/gofiber/fiber/v2"
  {{ range .Imports }} "{{ . }}" {{ end }}
)

type {{ .UpperName }}Storage interface {
  Create(ctx *fiber.Ctx, data *{{ .DataType }}) error
  Read(ctx *fiber.Ctx, id string) (*{{ .DataType }}, error)
  ReadAll(ctx *fiber.Ctx) ([]{{ .DataType }}, error)
  Update(ctx *fiber.Ctx, id string, data *{{ .DataType }}) error
  Delete(ctx *fiber.Ctx, id string, data *{{ .DataType }}) error
}

type {{ .UpperName }}Handler struct {
  storage {{ .UpperName }}Storage
}

func New{{ .UpperName }}Handler(storage {{ .UpperName }}Storage) *{{ .UpperName }}Handler {
  return &{{ .UpperName }}Handler{storage}
}

func (handler *{{ .UpperName }}Handler) RegisterHandlers(app *fiber.App) {
  errOrJson := func (ctx *fiber.Ctx, err error, data *interface{}) error {
    if err != nil {
      return err
    }
    return ctx.JSON(data)
  }
  a := handler.storage
  {{ range .Operators }}{{ if (eq . "CREATE") }}
  app.Get("{{ $.BasePath }}/{{ $.Name }}", func(c *fiber.Ctx) error {
    data, err := a.ReadAll(c)
    return errOrJson(c,err,data)
  })
  app.Get("{{ $.BasePath }}/{{ $.Name }}/:id", func(c *fiber.Ctx) error {
    data, err := a.Read(c, c.Params("id"))
    return errOrJson(c,err,data)
  }){{ end }}{{ if (eq . "READ") }}
  app.Post("{{ $.BasePath }}/{{ $.Name }}", func(c *fiber.Ctx) error {
    data := {{ $.DataType }}{}
    err := c.BodyParser(&data)
    if err != nil {
      return err
    }
    err = a.Create(c, &data)
    return errOrJson(c,err,data)
  }){{ end }}{{ if (eq . "UPDATE") }}
  app.Patch("{{ $.BasePath }}/{{ $.Name }}/:id", func(c *fiber.Ctx) error {
    data := {{ $.DataType }}{}
    err := c.BodyParser(&data)
    id := c.Params("id")
    if err != nil {
      return err
    }
    err = a.Update(c, id, &data)
    return errOrJson(c,err,data)
  }){{ end }}{{ if (eq . "DELETE") }}
  app.Delete("{{ $.BasePath }}/{{ $.Name }}/:id", func(c *fiber.Ctx) error {
    data := {{ $.DataType }}{}
    err := c.BodyParser(&data)
    id := c.Params("id")
    if err != nil {
      return err
    }
    err = a.Delete(c, id, &data)
    return errOrJson(c,err,data)
  }){{ end }}{{ end }}
}